<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flask on 李国宝</title><link>https://liguobao.github.io/tags/flask/</link><description>Recent content in Flask on 李国宝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 05 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://liguobao.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Flask：一、项目初始化</title><link>https://liguobao.github.io/p/python-flask%E4%B8%80%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>https://liguobao.github.io/p/python-flask%E4%B8%80%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;h1 id="python-flask最佳实践一项目初始化">Python Flask最佳实践：一、项目初始化
&lt;/h1>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>Python Flask 是一个很简单方便的Web框架，&lt;/p>
&lt;p>轻轻松松就可以完成一个Web 或者纯Web API。&lt;/p>
&lt;p>前阵子需要起一个简单的Web + 脚本项目，折腾flask的时候发现没找到比较顺手的脚手架教程。&lt;/p>
&lt;p>摸索了好一些知识，踩了一下坑什么的，&lt;/p>
&lt;p>最后站在巨人肩膀上更新个教程。&lt;/p>
&lt;h2 id="代码项目结构">代码项目结构
&lt;/h2>&lt;p>正儿八经一个项目工程，遵循 三层架构 + MVC模型 对项目代码有严格的划分，&lt;/p>
&lt;p>对这两个概念不太了解的朋友可以自行课后补习一下。&lt;/p>
&lt;p>说明如下:&lt;/p>
&lt;ul>
&lt;li>src 所有的项目代码文件&lt;/li>
&lt;li>src/service 逻辑层代码&lt;/li>
&lt;li>src/model 业务实体&lt;/li>
&lt;li>src/db 数据库相关，包括model定义和dao SQL查询&lt;/li>
&lt;li>src/sdk 依赖的外部接口&lt;/li>
&lt;li>src/job 后台进程启动的Job，一般都是通过API启动的后台任务&lt;/li>
&lt;li>src/utils 工具类，config 配置类也在里面&lt;/li>
&lt;li>src/app.py flask app 启动项&lt;/li>
&lt;li>manage.py flask.cli 启动入口 api + job&lt;/li>
&lt;li>Dockerfile Docker打包流程&lt;/li>
&lt;li>debug.py 本地debug 启动入口&lt;/li>
&lt;li>requirements.txt 所有的依赖包&lt;/li>
&lt;li>.vscode/launch.json vs code debug 配置&lt;/li>
&lt;/ul>
&lt;h2 id="开搞">开搞
&lt;/h2>&lt;p>废话多说两句，我比较喜欢requirements这种包组织方式，其他的就看自己了。&lt;/p>
&lt;h3 id="requirementstxt">requirements.txt
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">flask
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">flask-swagger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">flask-swagger-ui
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">flask-bootstrap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SQLAlchemy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pymysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pydantic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loguru
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gunicorn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单说明&lt;/p>
&lt;ul>
&lt;li>flask是核心包，flask-swagger + flask-swagger-ui 是用来做Swagger UI的，flask-bootstrap 用来乱糊 HTML页面的&lt;/li>
&lt;li>SQLAlchemy + pymysql + 一个是数据库ORM框架，一个是数据库驱动&lt;/li>
&lt;li>pydantic 用来配合SQLAlchemy完成Model数据转换，解决一些奇怪的序列化反序列化问题&lt;/li>
&lt;li>requests 用来对接外部HTTP接口或者写爬虫脚本&lt;/li>
&lt;li>loguru 简易日志框架，from loguru import logger 就完事了&lt;/li>
&lt;li>gunicorn 多进程部署&lt;/li>
&lt;/ul></description></item></channel></rss>